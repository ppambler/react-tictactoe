{"version":3,"sources":["add-link.js","index.js"],"names":["src","script","document","createElement","async","head","appendChild","getLink","Cell","props","className","onClick","aria-hidden","xlinkHref","text","ReactDOM","render","useState","cells","setCells","n","setN","finished","setFinished","result","setResult","sente","setSente","onClickCell","row","col","i","tell","map","items","item","random","Math","floor","url","decodeURI","window","location","href","indexOf","substr","refresh","getElementById"],"mappings":"qLAAe,SAAoBA,GACjC,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOG,OAAQ,EACfH,EAAOD,IAAMA,EACbE,SAASG,KAAKC,YAAYL,GCC5BM,CAAQ,iDAGR,IAAMC,EAAO,SAAUC,GACrB,OACE,yBAAKC,UAAU,OAAOC,QAASF,EAAME,SACnC,yBAAKD,UAAU,OAAOE,cAAY,QAChC,yBAAKC,UAAS,gBAAWJ,EAAMK,WA2GvCC,IAASC,OAAO,6BACd,kBAtGiB,WAAa,IAAD,EACHC,mBAAS,CACjC,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,QAJc,mBACtBC,EADsB,KACfC,EADe,OAMXF,mBAAS,GANE,mBAMtBG,EANsB,KAMnBC,EANmB,OAOGJ,oBAAS,GAPZ,mBAOtBK,EAPsB,KAOZC,EAPY,OAQDN,mBAAS,MARR,mBAQtBO,EARsB,KAQdC,EARc,OASHR,mBAAS,KATN,mBAStBS,EATsB,KASfC,EATe,KAkDvBC,EAAc,SAACC,EAAKC,GACpBZ,EAAMW,GAAKC,KAGfT,EAAKD,EAAI,GACTF,EAAMW,GAAKC,GAAOV,EAAI,IAAM,EAAI,IAAM,IAClB,MAApBF,EAAMW,GAAKC,GAAeH,EAAS,KAAOA,EAAS,KACnDR,EAASD,GA/CE,WACX,IAAK,IAAIa,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAoB,OAAhBb,EAAMa,GAAG,IAAeb,EAAMa,GAAG,KAAOb,EAAMa,GAAG,IAAMb,EAAMa,GAAG,KAAOb,EAAMa,GAAG,GAGlF,OAFAR,GAAY,QACZE,EAAUP,EAAMa,GAAG,GAAK,SAI5B,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAoB,OAAhBb,EAAM,GAAGa,IAAeb,EAAM,GAAGa,KAAOb,EAAM,GAAGa,IAAMb,EAAM,GAAGa,KAAOb,EAAM,GAAGa,GAGlF,OAFAR,GAAY,QACZE,EAAUP,EAAM,GAAGa,GAAK,SAK1Bb,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACT,OAAhBA,EAAM,GAAG,IAETK,GAAY,GACZE,EAAUP,EAAM,GAAG,GAAK,UAKxBA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACT,OAAhBA,EAAM,GAAG,IAETK,GAAY,GACZE,EAAUP,EAAM,GAAG,GAAK,UAGhB,IAANE,IACFG,GAAY,GACZE,EAAU,UAYZO,KAEF,OACE,yBAAKtB,UAAU,cACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,OAAOE,cAAY,QAChC,yBAAKC,UAAS,gBAAWa,MAF7B,UAOER,EAAMe,IAAI,SAACC,EAAOL,GAAR,OACR,yBAAKnB,UAAU,OACZwB,EAAMD,IAAI,SAACE,EAAML,GAAP,OACT,yBAAKpB,UAAU,OACb,kBAAC,EAAD,CAAMI,KAAMqB,EAAMxB,QAAS,kBAAMiB,EAAYC,EAAKC,YAO1DR,GACA,yBAAKZ,UAAU,YACZc,EACD,yBAAKd,UAAU,aAAaC,QAAS,kBAO/C,WACE,IAAIyB,EAASC,KAAKC,MAAuB,IAAhBD,KAAKD,SAAoB,GAC9CG,EAAMC,UAAUC,OAAOC,SAASC,MAElCJ,EADEA,EAAIK,QAAQ,KAAO,EACfL,EAAM,UAAYH,EAElBG,EAAIM,OAAO,EAAGN,EAAIK,QAAQ,YAAc,UAAYR,EAE5DK,OAAOC,SAASC,KAAOJ,EAf4BO,IAAWlC,cAAY,QAAO,yBAAKC,UAAU,oBAmBhG,OACMX,SAAS6C,eAAe,U","file":"static/js/main.85120dde.chunk.js","sourcesContent":["export default function importLink(src) {\n  let script = document.createElement('script')\n  script.async = true\n  script.src = src\n  document.head.appendChild(script)\n}","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css'\nimport getLink from './add-link.js'\n\ngetLink('//at.alicdn.com/t/font_1366289_c04d3nbkzzi.js')\n\n\nconst Cell = function (props) {\n  return (\n    <div className=\"cell\" onClick={props.onClick}>\n      <svg className=\"icon\" aria-hidden=\"true\">\n        <use xlinkHref={`#icon-${props.text}`}></use>\n      </svg>\n    </div>\n  )\n}\n\nconst Chessboard = function () {\n  const [cells, setCells] = useState([\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n  ])\n  const [n, setN] = useState(0)\n  const [finished, setFinished] = useState(false)\n  const [result, setResult] = useState(null)\n  const [sente, setSente] = useState('x') //默认是x先手\n  const tell = () => {\n    for (let i = 0; i < 3; i++) {\n      if (cells[i][0] !== null && cells[i][0] === cells[i][1] && cells[i][1] === cells[i][2]) {\n        setFinished(true)\n        setResult(cells[i][0] + ' win!')\n        return\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      if (cells[0][i] !== null && cells[0][i] === cells[1][i] && cells[1][i] === cells[2][i]) {\n        setFinished(true)\n        setResult(cells[0][i] + ' win!')\n        return\n      }\n    }\n    if (\n      cells[0][0] === cells[1][1] &&\n      cells[1][1] === cells[2][2] &&\n      cells[0][0] !== null\n    ) {\n      setFinished(true)\n      setResult(cells[0][0] + ' win!')\n      return\n    }\n\n    if (\n      cells[0][2] === cells[1][1] &&\n      cells[1][1] === cells[2][0] &&\n      cells[0][2] !== null\n    ) {\n      setFinished(true)\n      setResult(cells[0][2] + ' win!')\n      return\n    }\n    if (n === 8) {\n      setFinished(true)\n      setResult('Draw!')\n    }\n\n  }\n  const onClickCell = (row, col) => {\n    if (cells[row][col]) {\n      return\n    }\n    setN(n + 1)\n    cells[row][col] = n % 2 === 0 ? 'x' : 'o'\n    cells[row][col] === 'x' ? setSente('o') : setSente('x')\n    setCells(cells)\n    tell()\n  }\n  return (\n    <div className=\"chessBoard\">\n      <div className=\"sente\">\n        <svg className=\"icon\" aria-hidden=\"true\">\n          <use xlinkHref={`#icon-${sente}`}></use>\n        </svg>\n        下\n      </div>\n      {\n        cells.map((items, row) =>\n          <div className=\"row\">\n            {items.map((item, col) =>\n              <div className=\"col\">\n                <Cell text={item} onClick={() => onClickCell(row, col)} />\n              </div>\n            )}\n          </div>\n        )\n      }\n      {\n        finished &&\n        <div className=\"gameOver\">\n          {result}\n          <svg className=\"icon again\" onClick={() => refresh()} aria-hidden=\"true\"><use xlinkHref=\"#icon-again\"></use></svg>\n        </div>\n      }\n    </div>\n  )\n}\n\nfunction refresh() {\n  let random = Math.floor((Math.random() * 10000) + 1);\n  let url = decodeURI(window.location.href);\n  if (url.indexOf('?') < 0) {\n    url = url + \"?random\" + random;\n  } else {\n    url = url.substr(0, url.indexOf('?random')) + \"?random\" + random;\n  }\n  window.location.href = url;\n}\n\nReactDOM.render(<div>\n  <Chessboard />\n</div>, document.getElementById('root'))"],"sourceRoot":""}